main:
    params: [args]
    steps:
    - initial:
        assign:
          - type: "מסחרי"
          - project_id: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
          - dataset_id: "`yarel-playground.cars.cars_history`"
        next: extract_license_plate_id
    - extract_license_plate_id:
          call: http.get
          args:
            url: https://vision-a3d4cv5haa-ez.a.run.app
            headers:
              Content-Type: "text/plain"
            query:
              bucket_name: ${args.car_photos_bucket_name}
              img_file_name: ${args.car_photo_file_name}
            auth:
                  type: OIDC
          result: car_license_plate
          next: log_license_plate
    - log_license_plate:
        call: sys.log
        args:
          text: ${car_license_plate.body}
          severity: "INFO" # Optional
        next: check_if_found_license_plate
    - check_if_found_license_plate:
        switch:
          - condition: ${car_license_plate.body == ""}
            steps:
              - plate_failure:
                  call: failure
                  args:
                    to_email: ${args.to_email}
                  next: end
        next: get_message
    - get_message:
        try:
          call: http.get
          args:
            url: https://data.gov.il/api/3/action/datastore_search
            headers:
              Content-Type: "text/plain"
            query:
              resource_id: "053cea08-09bc-40ec-8f7a-156f0677aff3"
              q: ${car_license_plate.body}
          result: car_record
        retry: ${http.default_retry}
        except:
          steps:
            - http_failure:
                call: failure
                args:
                  to_email: ${args.to_email}
                next: end
        next: details
    - details:
        try:
          assign:
            - baalut: ${car_record.body.result.records[0].baalut}
            - brand: ${car_record.body.result.records[0].tozeret_nm}
            - model: ${car_record.body.result.records[0].kinuy_mishari}
            - year: ${car_record.body.result.records[0].shnat_yitzur}
            - front_tire: ${car_record.body.result.records[0].zmig_kidmi}
            - back_tire: ${car_record.body.result.records[0].zmig_ahori}
        except:
          steps:
            - details_failure:
                call: failure
                args:
                  to_email: ${args.to_email}
                next: end
        next: get_image
    - get_image:
        call: http.get
        args:
          url: https://customsearch.googleapis.com/customsearch/v1
          headers:
            Accept: "application/json"
          query:
            key: ${args.search_id}
            q: ${string(brand) + " " + string(model) + " " + string(year)}
            cx: ${args.search_cx}
            searchType: "image"

        result: image
        next: vehicle_type

    - vehicle_type:
        switch:
          - condition: ${baalut == "פרטי"}
            next: private
    - private:
        assign:
          - type: "פרטי"
        next: insert_data

    - insert_data:
        call: googleapis.bigquery.v2.jobs.query
        args:
          projectId: ${project_id}
          body:
            useLegacySql: false
            query: ${"INSERT "+dataset_id+" (model, type, id, brand, year, image_url) VALUES ('"+string(model)+"', '"+string(type)+"', '" + car_license_plate.body + "', '" + text.replace_all(string(brand), "'", "") + "', '" + string(year) + "', '" + image.body.items[0].link + "')"}
    - call_reciept:
          call: http.post
          args:
              url: https://notify-a3d4cv5haa-ez.a.run.app
              body:
                  VehicleID: ${car_license_plate.body}
                  Brand: ${brand}
                  Model: ${model}
                  Year: ${string(year)}
                  FrontTire: ${front_tire}
                  BackTire: ${back_tire}
                  ToEmail: ${args.to_email}
                  ImageURL: ${image.body.items[0].link}
              auth:
                  type: OIDC
          next: end

    - return_value:
        return: ${"Vehicle type is "+string(type)+", brand is "+string(brand)+", model is "+string(model)+", year is "+string(year)+ " "+image.body.items[0].link}
failure:
  params: [to_email]
  steps:
    - send_failure_email:
        call: http.post
        args:
            url: https://notify-a3d4cv5haa-ez.a.run.app
            body:
                # VehicleID: ${car_license_plate}
                ToEmail: ${to_email}
            auth:
                type: OIDC
        next: end